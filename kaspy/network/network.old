class kaspa_network:
    
    dns_seed_servers = [
        f"mainnet-dnsseed.daglabs-dev.com",
        f"mainnet-dnsseed-1.kaspanet.org",
        f"mainnet-dnsseed-2.kaspanet.org",
        f"dnsseed.cbytensky.org",
        f"seeder1.kaspad.net",
        f"seeder2.kaspad.net",
        f"seeder3.kaspad.net",
        f"seeder4.kaspad.net",
        f"kaspadns.kaspacalc.net"
    ]
    
    RPC_addresses = set()
    P2P_addresses = set()
    
    running = False
    scan_interval=60
        
    locker = Lock()
    
    @classmethod
    def run(cls, scan_interval=scan_interval):
        if cls.running:
            raise Exception
        cls.scan_interval = scan_interval
        cls.max_nodes = max_nodes
        cls.running = True
        cls.populate_nodes()
        #cls.scanner = threading.Timer(cls.scan_interval, cls.populate_nodes) # - perhaps for later use
    
    @classmethod
    def shut_down(cls):
        cls.running = False
        cls.RPC_addresses = set()
        cls.scanner.cancel()
    
    #could still be useful to fledge out kaspa_network as complete topology.
    ''''
    @classmethod
    def populate_nodes(cls):
        addresses = set()
        LOG.info(lm.SCANNING_FOR_NODES)
        for dns_server in cls.dns_seed_servers:
            LOG.info(lm.FINDING_NODES(dns_server))
            peers = cls.connected_peers(dns_server, RPC_DEF_PORT)
            if peers:
                LOG.info(lm.FOUND_NODES(dns_server, set(peers) - addresses))
                addresses.update(peers)
        cls.locker.acquire()
        cls.RPC_addresses.update(addresses)
        cls.locker.release()
    '''
        
    @classmethod
    def yield_open_RPC_nodes(cls) -> Node:
        while True:
            scanned = set()
            for dns_server in cls.dns_seed_servers:
                addresses = query_node.connected_peers(ip=dns_server, port=RPC_DEF_PORT)
                while True:
                    for address in addresses:
                        if query_node.is_port_open(address, RPC_DEF_PORT, 1):
                            yield address
                        
                    
                    
                    if address:
                    addresses = query_node.connected_peers(ip=dns_server, port=RPC_DEF_PORT)

        if cls.RPC_addresses:
            for addr in cls.RPC_addresses:
                if cls.is_port_open(*addr.rsplit(':', 1), 0.5):
                    node = Node(addr)
                    LOG.info(lm.RETRIVED_NODE(node.ip, node.port))
                    yield node